const BalanceEmoji = "üåü";
const BotEmoji = "ü§ñ";
const BuyEmoji = "üìà";
const CheckEmoji = "‚úÖ";
const ExpEmoji = "üïê";
const FutureEmoji = "üìú";
const HelpEmoji = "üôã";
const LeverageEmoji = "üöÄ";
const LiquidationEmoji = "üî´";
const LossEmoji = "üî¥";
const MarginEmoji = "üìè";
const OptionEmoji = "ü™ô";
const PriceEmoji = "üí≥";
const ProfitEmoji = "üü¢";
const QtyEmoji = "üí∞";
const RefreshEmoji = "üîÑ";
const SellEmoji = "üìâ";
const StartEmoji = "üé¨";
const WarningEmoji = "‚ö†Ô∏è";

/**
 * 
 * @param {Object} t for translation
 * @param {String} version
 * @param {String} message
 * 
 * @returns {String}
 */
const renderBotRestartMessage = (t, version, message) => {
    let innerMessage = "";
    if (message) {
        innerMessage = `
${t.__(`J'ai un message de mon cr√©ateur √† te passer :`)}

<i>${message}</i>
        `
    }
    return `
üì£ ${t.__(`Hey t'es l√† ? Je veux pas te d√©ranger chef, juste je veux t'informer que j'ai √©t√© mis √† jour en %s`, `<code>v${version}</code>`)}

${t.__(`Partage moi √† tes camaradas`)} <code>https://t.me/ElmarcoBot</code>

${t.__(`Tu trouveras une liste des modifications ici`)} <a href="https://github.com/Chaine-de-Blocs/el-marco-bot#changelogs">https://github.com/Chaine-de-Blocs/el-marco-bot#changelogs</a>
${innerMessage}
‚ö†Ô∏è ${t.__(`J'ai pas une √©norme m√©moire, quand je suis mis √† jour j'oublie toutes les strat√©gies. <b>Si tu avais une strat√©gie en cours relance l√†</b></b>`)}
    `;
}

/**
 * @param {Object} t for translation
 * @param {String} network
 * 
 * @returns {String}
 */
const renderStartAPICreds = (t, network) => {
    const lnMarketURL = network === 'testnet'
        ? 'https://testnet.lnmarkets.com/user/api'
        : 'https://lnmarkets.com/user/api'

    return `
${t.__("Bienvenido Gringos")},

${t.__(`Je suis Marco, ou plus connu sous le nom de El Maaarrrco.`)} ${t.__(`Avec moi on fait business et je ne suis l√† que pour √ßa.`)} ${t.__(`Tu as raison de t'aventurer dans la finance Bitcoin avec <a href="https://lnmarkets.com/">LNMarket</a>, y'a de quoi se retrousser les manches pour ramassers quelques p√©pites ici.`)}

${t.__(`Pour qu'on bosse ensemble tu vas devoir me filer qualques acc√®s √† l'API de LNMarket.`)}

‚ö° ${t.__(`On est sur le r√©seau <b>%s</b>`, network)} ‚ö°

${t.__(`Cr√©√© ton client API en allant ici %s.`, `<a href="${lnMarketURL}">${lnMarketURL}</a>`)}

<b>${t.__(`Pense bien √† noter ton %s tu en auras besoin pour s√©curiser l'acc√®s.`, `<code>passphrase</code>`)}</b>

${t.__(`Pour qu'on puisse bien collaborer donne moi les acc√®s suivants :`)}
${CheckEmoji} Get user
${CheckEmoji} Deposit
${CheckEmoji} Get open and running positions
${CheckEmoji} Get closed positions
${CheckEmoji} Create positions
${CheckEmoji} Modify positions
${CheckEmoji} Close and cancel positions
${CheckEmoji} Make a new options trade
${CheckEmoji} Get options trades

${t.__(`Tu peux ne pas tout mettre, certaines de mes comp√©tences ne pourront pas √™tre mises √† ton service Gringos.`)}

${t.__(`Et enfin transmets les moi par message sous la forme suivante (mets bien un espace entre chaque info) :`)}

<code>&lt;Api Key&gt; &lt;Api Secret&gt; &lt;Passphrase&gt;</code>

<i>${t.__(`Pour ta s√©curit√© je ne vais que sauvegarder tes acc√®s API et les chiffrer avec ton %s. Ton %s sera gard√© en session. A tout moment tu pourras supprimer ta session et tes acc√®s avec la commande %s`, `<code>passphrase</code>`, `<code>passphrase</code>`, `<code>/removesession</code>`)}</i>
    `;
}

/**
 * @param {Object} t for translation
 * @returns {String}
 */
const renderStartStrategy = (t) => {
    return `
${t.__(`Ah voil√† je vais pouvoir bosser, pour tout te dire je m'ennuyais par ici !`)}

${t.__(`Bon j'ai quelques strat√©gies dans ma besace, je vais te les dire.`)}

<b>${WarningEmoji} ${t.__(`Mais avant tout Gringos tu dois savoir un truc. Moi je ferais mon max pour que tu fasses du pognon, mais sache que je suis pas un g√©nie ni un alchimiste qui va te faire de l'or <i>out of nowhere</i>. Tu risques de perdre un peu, mais tu peux aussi gagner si je me d√©brouille bien eh !`)}</b>

${t.__(`Bon voil√† mes strat√©gies :`)}

<code>random</code> <code>[max_openned_positions]</code> <code>[max_leverage]</code> <code>[max_margin]</code> ${t.__(`Je fais tout au hasard comme les analyseurs techniques üí™ Je mets pas de StopLoss ni TakeProfit.`)}

${t.__(`Remplace les options entre [] par des valeurs :`)}

<code>[max_openned_positions]</code> ${t.__(`Chiffre qui repr√©sente le quantit√© max de positions que je peux ouvrir en m√™me temps`)}
<code>[max_leverage]</code> ${t.__(`Levier maximum que je pourrais mettre`)}
<code>[max_margin]</code> ${t.__(`La marge maximum que je pourrais cr√©er en sats`)}

<i>${t.__(`Ecris moi la strat√©gie que tu veux que j'active et je m'y mets`)}</i>
    `;
}

/**
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderRemoveSessionMessage = (t) => {
    return `
${t.__(`No problemo, j'ai supprim√© tes informations secr√®tes de ma m√©moire. Fais attention si tu as une strat√©gie en cours, cela ne va pas l'arr√™ter.`)}

${t.__(`Fais %s pour l'arr√™ter`, `<code>/stopstrategy</code>`)}
    `;
}

/**
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderAlreadyRunningStrat = (t) => {
    return `
${t.__(`Ah ! Tu as d√©j√† une strat√©gie en cours, fais d'abord la commande %s pour arr√™ter la strat√©gie en cours et en lancer une nouvelle.`, `<code>/stopstrategy</code>`)}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * @param {Object} stats
 * @param {Number} [stats.total_pl]
 * @param {Number} [stats.total_closed]
 * @param {Number} [stats.avg_margin]
 * @param {Number} [stats.avg_price]
 * @param {Number} [stats.avg_leverage]
 * @param {Number} [stats.avg_pl]
 * @param {Number} [stats.avg_exit_price]

 * @returns {String}
 */
const renderStategyStop = (t, stats) => {
    return `
${t.__(`La strat√©gie automatique a √©t√© arr√™t√©e, voil√† ses r√©sultats :`)}

${renderStartegyStats(t, stats)}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * @param {String} strat 
 * @param {Object} options 
 * @param {Number} [options.max_openned_positions]
 * @param {Number} [options.max_leverage]
 * @param {Number} [options.max_margin]
 * 
 * @returns {String}
 */
const renderStartegyPreview = (t, strat, options) => {
    return `
${t.__(`Tu veux lancer la strat√©gie %s ? C'est une bonne id√©e.`, strat)}

${t.__(`Avant de lancer la machine de guerre jette un oeil sur les configurations c'est important :`)}

${FutureEmoji} ${t.__(`Je laisserai ouvert un maximum de <b>%s</b> Future`, options.max_openned_positions)}
${LeverageEmoji} ${t.__(`Je ferai des leviers qui ne d√©passeront pas <u>x%s</u>`, options.max_leverage)}
${MarginEmoji} ${t.__(`Je ferai des marges au maximum de`)} <b>${t.__n(`%s sat`, options.max_margin)}</b>

${t.__(`Ca te va Gringos ?`)}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * @param {String} strat 
 * 
 * @returns {String}
 */
const renderStrategyStarted = (t, strat) => {
    return `
üî• ${t.__(`OH ! Du job pour El Marrrco ! Allez je m'y mets, je lance la strat√©gie <b>%s</b>.`, strat)} ${t.__(`Je vais te notifier de mes actions au fil du temps.`)}
    `;
}

/**
 * @param {Object} t for translation
 * @param {Object} stats
 * @param {Number} [stats.total_pl]
 * @param {Number} [stats.total_closed]
 * @param {Number} [stats.total_closed_by_user]
 * @param {Number} [stats.total_oppened]
 * @param {Number} [stats.avg_margin]
 * @param {Number} [stats.avg_price]
 * @param {Number} [stats.avg_leverage]
 * @param {Number} [stats.avg_pl]
 * @param {Number} [stats.avg_exit_price]
 * @returns {String}
 */
const renderStartegyStats = (t, stats) => {
    return `
${t.__(`PL Total`)} ${renderPL(t, stats.total_pl)} ${t.__(`pour un PL moyen de`)} <b>${t.__n(`%s sat`, stats.avg_pl.toFixed(2))}</b>
${MarginEmoji} ${t.__(`Moyenne de margin`)} <b>${t.__n(`%s sat`, stats.avg_margin.toFixed(2))}</b>
${PriceEmoji} ${t.__(`Moyenne de prix d'entr√©`)} <b>${t.__n(`%s USD`, stats.avg_price.toFixed(2))}</b>
${LeverageEmoji} ${t.__(`Moyenne de levier`)} <u>x${stats.avg_leverage.toFixed(0)}</u>

${t.__(`J'ai ouvert <b>%s</b> positions et on en a cl√¥tur√© <b>%s</b>.`, stats.total_oppened, stats.total_closed)}
    `;
}

/**
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderStartSuccess = (t) => {
    return `
${t.__(`On est bons ! Tes acc√®s sont bien valides. Aucune inqui√©tude j'ai en m√©moire tes acc√®s mais je les ai chiffr√© eheh ! Ton <code>passphrase</code> est la cl√© de chiffrement que je garde en session uniquement.`)}

${t.__(`On peut commencer les choses s√©rieuses, tape %s pour voir les services que je te propose.`, `<code>/help</code>`)}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderRequireNewsession = (t) => {
    return `
${t.__(`Ta session est termin√©e pour ta s√©curit√©, refais en une en tapant %s`, `<code>/start</code>`)}
    `;
}

/**
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderHelp = (t) => {
    return `
${t.__(`Si tu veux bosser avec moi on va devoir s'accorder, no problemo je suis un partenaire facile et efficace.`)}

${t.__(`Je te dis comment tu vas pouvoir bosser avec moi avec cette <b>liste de commandes</b>.`)}

${t.__(`Tout ce qui est entre des [] sont des param√®tres optionnels.`)}

${t.__(`Pour chaque commande je te donne des pr√©cisions en italique, je suis simple et efficace mais on fait de la finance sur LN ! Pas un truc de rigolo`)}

üåÄ <b>${t.__(`G√©n√©ral`)}</b> üåÄ 

<code>/start</code> ${t.__(`Pour d√©marrer ou refaire une session avec de nouveaux acc√®s API LNMarket`)}
<code>/removesession</code> ${t.__(`Pour mettre fin √† ta session El Marco, j'oublie tes acc√®s API LNMarket`)}
<code>/home</code> ${t.__(`Pour revenir √† l'accueil`)}
<code>/help</code> ${t.__(`Pour afficher le menu d'aide`)}


üåÄ <b>${t.__(`Gestion de compte LNMarket`)}</b> üåÄ 

<code>/balance</code> ${t.__(`Pour afficher ta balance sur LNMarket`)}
<code>/deposit</code> ${t.__(`Pour d√©poser des fonds dans ton wallet LNMarket`)}


üåÄ <b>${t.__(`Trading manuel`)}</b> üåÄ 

<code>/futures</code> ${t.__(`Pour lister tes Futures ouverts`)}

${renderCloseFutureHelp(t)}
${renderCloseAllFutureHelp(t)}

${renderCreateFutureHelp(t)}


üåÄ <b>${t.__(`Trading automatique (strat√©gies)`)}</b> üåÄ

<code>/strategy</code> ${t.__(`Pour d√©marrer une strat√©gie automatique. Lance la commande et je te guide.`)}
<code>/stopstrategy</code> ${t.__(`Pour stopper la strat√©gie en cours, je te ferais un r√©sum√© des r√©sultats.`)}
<code>/strategystats</code> ${t.__(`Pour afficher les stats de la strat√©gie en cours.`)}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * @param {Number} sats
 * 
 * @returns {String}
 */
const renderTipsMessage = (t, sats) => {
    return `
üåÆ ${t.__(`C'est vraiment sympa de penser au cr√©ateur de El Marrrco, je te pr√©pare l'invoice de`)} <b>${t.__n(`%s sat`, sats)}</b> ${t.__(`pour le tips !`)}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * @returns {String}
 */
const renderDepositRequest = (t) => {
    return `
${t.__(`Tu veux renflouer les caisses de satoshis ? Tr√®s bien dis moi combien tu veux envoyer en <i>sats</i>`)}
    `
}

/**
 * 
 * @param {Object} t for translation
 * @param {Object} option
 * @param {String} [option.id]
 * @param {Number} [option.strike]
 * @param {Number} [option.quantity]
 * @param {Number} [option.margin]
 * @param {Date} [option.created_at]
 * @param {Date} [option.expire_at]
 * @returns {String}
 */
const renderOption = (t, option) => {
    return `
${t.__(`Option`)} <code>${option.id}</code>
<i>${t.__(`Cr√©√©e le`)} ${option.created_at.toLocaleDateString()} ${t.__(`√†`)} ${option.created_at.toLocaleTimeString()}</i>

${ExpEmoji} ${t.__(`Expire le`)} ${option.expire_at.toLocaleDateString()} ${t.__(`√†`)} ${option.created_at.toLocaleTimeString()}

‚ö° ${t.__(`Strike √†`)} <b>${option.strike} USD</b>
${QtyEmoji} ${t.__(`Quantit√©`)} <b>${option.quantity} USD</b>
${MarginEmoji} ${t.__(`La marge est de`)} <b>${option.margin} USD</b>
${renderHr}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * @param {Object} future
 * @param {String} [future.pid]
 * @param {String} [future.side]
 * @param {Number} [future.creation_ts]
 * @param {Number} [future.quantity]
 * @param {Number} [future.price]
 * @param {Number} [future.margin]
 * @param {Number} [future.liquidation]
 * @param {Number} [future.stoploss]
 * @param {Number} [future.takeprofit]
 * @param {Number} [future.pl]
 * @param {Number} [future.leverage]
 * @param {Boolean} isStratPosition
 * @returns {String}
 */
const renderFuture = (t, future, isStratPosition) => {
    const createdAt = new Date(future.creation_ts);
    return `
${t.__(`Future`)} ${renderSide(future.side)} <code>${future.pid}</code>
<i>${t.__(`Cr√©√© le`)} ${createdAt.toLocaleDateString()} ${t.__(`√†`)} ${createdAt.toLocaleTimeString()}${isStratPosition ? ` ${t.__(`par la Strat√©gie de Marco`)} ${BotEmoji}` : ''}</i> 

${QtyEmoji} ${t.__(`Quantit√©`)} <b>${future.quantity} USD</b>
${LeverageEmoji} ${t.__(`Le levier est de`)} <u>x${future.leverage}</u>

${PriceEmoji} ${t.__(`Prix d'entr√©`)} <b>${future.price} USD</b>
${MarginEmoji} ${t.__(`Margin de`)} <b>${t.__n(`%s sat`, margin)}</b>
${LiquidationEmoji} ${t.__(`Liquidation √†`)} <b>${future.liquidation} USD</b>

${renderSL(t, future.stoploss)}
${renderTP(t, future.takeprofit)}

${renderPL(t, future.pl)}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderNoFutures = (t) => {
    return t.__(`Tu n'as aucun Future d'ouvert`);
}

/**
 * 
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderNoOptions = () => {
    return t.__(`Tu n'a aucune Option d'ouverte`);
}

/**
 * 
 * @param {Object} t for translation
 * @param {Array.<{pid: String, margin: Number, pl: Number}>} futures
 * 
 * @returns {String}
 */
const renderClosingFuture = (t, futures) => {
    let futuresMsg = "";
    for(const f of futures) {
        const plEmoji = f.pl >= 0 ? `${ProfitEmoji} +` : `${LossEmoji} `;
        futuresMsg += `\n${FutureEmoji} ${t.__(`Future`)} <code>${f.pid}</code> ${plEmoji}<b>${f.pl} USD</b> - ${t.__(`Margin`)} <b>${f.margin} USD</b>`
    }
    return `
${t.__(`Oy Gringos, tu veux qu'on cl√¥ture un Future ? Pas de probl√®me, tiens voil√† tes Futures ouverts :`)}

<i>(${t.__(`Clique sur l'ID du Future que tu veux cl√¥turer et envoie le en r√©ponse √† ce message`)})</i>
${futuresMsg}
    `
}

/**
 * 
 * @param {Object} t for translation
 * @param {Number|undefined} lastOffer
 * 
 * @returns {String}
 */
const renderCreateFutureParamsError = (t) => {
    return `
${t.__(`Okay tu veux cr√©er un Future voil√† comment on fait par chez moi :`)}

${renderCreateFutureHelp(t)}

${t.__(`Pour t'inspirer voil√† quelques commandes pour cr√©er un Future :`)}

<code>/createfuture l q=100 x=50 p=35333 sl=35300</code>

<code>/createfuture s q=100 x=50 sl=36000 tp=38000</code>
    `;
}

/**
 * 
 * @param {Object} t for translation
 * @param {Object} params
 * @param {String} [params.side] 
 * @param {String} [params.type] 
 * @param {Number} [params.margin] 
 * @param {Number} [params.leverage] 
 * @param {Number} [params.quantity] 
 * @param {Number} [params.takeprofit] 
 * @param {Number} [params.stoploss] 
 * @param {Number} [params.price]
 * @param {Number} displayPrice price to display if market
 * @returns {String}
 */
const renderFutureReview = (t, params, displayPrice) => {
    const price = params.price || displayPrice;
    const margin = (params.margin
        ? params.margin
        : (params.quantity / (price * params.leverage)) * 1e8
    ).toFixed(2);
    const quantity = (params.quantity
        ? params.quantity
        : (params.margin * price * params.leverage) / 1e8
    ).toFixed(2);

    return `
${t.__(`On va cr√©er ce Future :`)}

${t.__(`Future`)} ${renderSide(params.side)}
${PriceEmoji} ${t.__(`Au prix`)} <b>${params.price ? params.price+" USD" : `${t.__(`March√©`)} (${displayPrice} USD)`}</b>
${QtyEmoji} ${t.__(`Quantit√© de`)} <b>${quantity} USD</b>
${LeverageEmoji} ${t.__(`Levier`)} <u>x${params.leverage}</u>
${MarginEmoji} ${t.__(`Marge de`)} <b>${t.__n(`%s sat`, margin)}</b>

${renderSL(t, params.stoploss)}
${renderTP(t, params.takeprofit)}
    `;
}

/**
 * 
 * @param {Object} t for translation
 * @param {Object} future
 * @param {String} [future.pid]
 * @param {Number} [future.id]
 * @param {String} [future.type]
 * @param {String} [future.takeprofit_wi]
 * @param {Number} [future.takeprofit]
 * @param {String} [future.stoploss_wi]
 * @param {Number} [future.stoploss]
 * @param {String} [future.side]
 * @param {Number} [future.quantity]
 * @param {Number} [future.price]
 * @param {Number} [future.pl]
 * @param {String} [future.market_wi]
 * @param {Number} [future.market_filled_ts]
 * @param {String} [future.margin_wi]
 * @param {Number} [future.margin]
 * @param {Number} [future.liquidation]
 * @param {Number} [future.leverage]
 * @param {String} [future.creation_ts]
 * @returns {String}
 */
const renderFutureCreated = (t, future) => {
    return `
${t.__(`Le Future %s a √©t√© cr√©√© Gringos ! Tu le verras en cherchant %s`, `<code>${future.pid}</code>`, `<code>/futures</code>`)}
    `
}

/**
 * 
 * @param {Object} t for translation
 * @param {String} futureID 
 * 
 * @returns {String}
 */
const renderCloseFuture = (t, futureID) => {
    return t.__(`Le Future %s a √©t√© cl√¥tur√©`, futureID);
}

/**
 * 
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderCloseAllFuture = (t) => {
    return t.__(`Tous les Futures ont √©t√© ferm√©s !`);
}

/**
 * 
 * @param {Object} t for translation
 * @param {Number} agregatedPL
 * 
 * @returns {String}
 */
const renderCloseAllFutureConfirm = (t, agregatedPL) => {
    return `
${t.__(`Bon t'es s√ªr de toi ? On est sur un P/L cumulatif de`)} ${agregatedPL < 0 ? LossEmoji : ProfitEmoji } ${t.__n(`%s sat`, agregatedPL)}.
    `;
}

/**
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderCreateFutureHelp = (t) => {
    return `<code>/createfuture</code> ${t.__(`Cr√©er un Future`)} <code>(l ou s) [q=&lt;USD quantity&gt;] x=&lt;levier&gt; [p=&lt;prix d'entr√©e&gt;] [m=&lt;marge&gt;] [sl=&lt;StopLoss&gt;] [tp=&lt;TakeProfit&gt;]</code>
<i>${t.__(`Mets %s pour faire un Long (Buy) et %s pour faire un Short (Sell)`, `<code>l</code>`, `<code>s</code>`)}</i>

<code>q</code> ${t.__(`c'est pour la quantit√©`)}
<code>m</code> ${t.__(`c'est pour la margin`)}
<b>${t.__(`Tu dois au moins pr√©ciser %s ou %s pour cr√©er le Future`, `<code>q</code>`, `<code>m</code>`)}</b>

<code>p</code> ${t.__(`c'est pour pr√©ciser le limit price, si tu ne le mets pas alors je vais cr√©er un order au prix de march√©.`)}`; 
}

/**
 * 
 * @param {Object} t for translation
 * @param {Object} future
 * @param {String} [future.pid]
 * @param {String} [future.side]
 * @param {Number} [future.creation_ts]
 * @param {Number} [future.quantity]
 * @param {Number} [future.price]
 * @param {Number} [future.margin]
 * @param {Number} [future.liquidation]
 * @param {Number} [future.stoploss]
 * @param {Number} [future.takeprofit]
 * @param {Number} [future.pl]
 * @param {Number} [future.leverage]
 * @param {Boolean} isStratPosition
 * @returns {String}
 */
const renderCloseFuturePreview = (t, future, isStratPosition) => {
   return `
${t.__(`Perfecto ! Je te montre √† quoi il ressemble et tu me confirmes si on le cl√¥ture ou non`)}

${renderFuture(t, future, isStratPosition)}
${isStratPosition ? `<i>${t.__(`C'est une position cr√©√©e par la strat√©gie, tu peux la fermer manuellement elle sera prise en compte dans les statistiques de la strat√©gie`)}</i>` : ''}`;
}

/**
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderCloseFutureHelp = (t) => {
    return `<code>/closefuture</code> ${t.__(`Pour cl√¥turer un Future rien de plus simple je te guide`)}`;
}

/**
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderCloseAllFutureHelp = (t) => {
    return `<code>/closeallfutures</code> ${t.__(`Pour cl√¥turer tous les Futures ouverts.`)}`;
}

/**
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderNeedMe = (t) => {
    return t.__("Toujours besoin de moi Gringos ?");
}

/**
 * 
 * @param {Object} t for translation
 * @param {Error} err
 * @returns {String}
 */
const renderBadAPICreds = (t, err) => {
    return `
${t.__(`Hum... J'ai eu une erreur en essayant tes acc√®s sur l'API de LNMarket, voil√† l'erreur :`)}
${err}

<b>${t.__(`Pour recommencer fais √† nouveau %s`, `<code>/start</code>`)}</b>
    `
}

/**
 * 
 * @returns {String}
 */
const renderHr = () => {
    return "----------------------------------------------";
}

/**
 * 
 * @param {Object} t for translation
 * @param {String} sl 
 * @returns {String}
 */
const renderSL = (t, sl) => {
    if (!sl) {
        return `${WarningEmoji} ${t.__(`Pas de StopLoss`)}`;
    }
    return `${t.__(`StopLoss √†`)} <b>${sl} USD</b>`;
}
/**
 * 
 * @param {Object} t for translation
 * @param {String} tp 
 * @returns {String}
 */
const renderTP = (t, tp) => {
    if (!tp) {
        return `${WarningEmoji} ${t.__(`Pas de TakeProfit`)}`;
    }
    return `${t.__(`TakeProfit √†`)} <b>${tp} USD</b>`;
}
/**
 * @param {Object} t for translation
 * @param {String} pl 
 * 
 * @returns {String}
 */
const renderPL = (t, pl) => {
    if (pl <= 0) {
        return `${LossEmoji} ${t.__(`P/L √†`)} <b>${t.__n(`%s sat`, pl)}</b>`;
    }
    return `${ProfitEmoji} ${t.__(`P/L √†`)} +<b>${t.__n(`%s sat`, pl)}</b>`;
}

/**
 * @param {String} side 
 * @returns {String}
 */
const renderSide = (side) => {
    if (side === "b") {
        return `${BuyEmoji} Buy`;
    }
    return `${SellEmoji} Sell`;
}

/**
 * 
 * @param {Object} t for translation
 * @param {Error} e 
 * 
 * @returns {String}
 */
const renderError = (t, e) => {
    return t.__(`Oulah y'a une erreur`) + `> ${e}`;
}

/**
 * 
 * @param {Object} t for translation
 * 
 * @returns {String}
 */
const renderCmdNotAvailable = (t) => {
    return `
${t.__(`Cette fonctionnalit√© n'est pas encore dispo, c'est pas d'chance.`)}

${t.__(`Laisse un mot sur le Github si tu veux √† tout prix ce que tu cherches`)} <a href="https://github.com/Chaine-de-Blocs/el-marco-bot">${t.__(`Aller sur le Github de Elmarco`)}</a>
    `;
}

module.exports = {
    renderHelp,
    renderOption,
    renderFuture,
    renderClosingFuture,
    renderNeedMe,
    renderError,
    renderCloseFuture,
    renderNoFutures,
    renderNoOptions,
    renderHr,
    renderCreateFutureParamsError,
    renderFutureCreated,
    renderFutureReview,
    renderCloseFuturePreview,
    renderStartAPICreds,
    renderBadAPICreds,
    renderStartSuccess,
    renderRequireNewsession,
    renderCmdNotAvailable,
    renderCloseAllFutureConfirm,
    renderCloseAllFuture,
    renderDepositRequest,
    renderStartStrategy,
    renderAlreadyRunningStrat,
    renderPL,
    renderSide,
    renderStategyStop,
    renderStartegyStats,
    renderStartegyPreview,
    renderStrategyStarted,
    renderTipsMessage,
    renderRemoveSessionMessage,
    renderBotRestartMessage,
    Emoji: {
        FutureEmoji,
        OptionEmoji,
        CheckEmoji,
        ExpEmoji,
        QtyEmoji,
        MarginEmoji,
        LeverageEmoji,
        PriceEmoji,
        LiquidationEmoji,
        BuyEmoji,
        SellEmoji,
        BalanceEmoji,
        ProfitEmoji,
        LossEmoji,
        BotEmoji,
        HelpEmoji,
        StartEmoji,
        WarningEmoji,
        RefreshEmoji,
    },
};